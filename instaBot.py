import requests                                      #importing requests library which is a python module that we can use to send all kinds of HTTP requests.
import urllib                                        #importing urllib to fetch data across world wide web.
from textblob import TextBlob                        #For Sentiment Analysis in Python, we use the library TextBlob.
from textblob.sentiments import NaiveBayesAnalyzer   #Textblob is a library and NaiveBayesAnalyzer is a classifier used for sentiment analysis
import matplotlib.pyplot as plt                      #Matplotlib is a Python 2D plotting library
import pylab                                         #PyLab is a module that belongs to the Python mathematics library Matplotlib.
from wordcloud import WordCloud                      #worldcloud library is used to draw image of words that are bigger in size have a high frequency
from termcolor import *                              #import all the files from termcolor module to print colored text on terminal
import colorama                                      #import colorama file to print the colored text on terminal
import re                                            #import this library for regular expression


#Token owner : "bhavikaa_singla"(i.e  this Instagram API Access Token is generated by me)
#Sandbox Users : "brar_japji" , "simranmadaan12"
APP_ACCESS_TOKEN = "3988867676.7a2b6a6.c2358b1f590241b882ad58cfb23e9b41"     #global variable for the instagram API access token
BASE_URL = "https://api.instagram.com/v1/"                                   #global variable for the base url of all the requests



colorama.init()                                                             #to initialize colorama



#Function declaration to get your own information
def self_info():
    request_url = (BASE_URL + "users/self/?access_token=%s") %(APP_ACCESS_TOKEN)    #query parameters are passed
    print "GET request url: %s " %(request_url)                         #to print request url
    user_info = requests.get(request_url)                               #GET request to fetch the data
    user_info = user_info.json()                                        #.json is used for handling json data
    if user_info["meta"]["code"] == 200:                                #if status code is 200 then it will check the length of the data in the list
        if len(user_info["data"]):                                      #if length is not zero, then it will print users details otherwise else part will be executed
            print "\n"
            cprint ("%s" % "Owner's information : " ,"red")
            print "Username : %s" % (user_info["data"]["username"])
            print "No. of followers : %s" % (user_info["data"]["counts"]["followed_by"])
            print "No. of people you are following : %s" % (user_info["data"]["counts"]["follows"])
            print "No. of posts : %s" % (user_info["data"]["counts"]["media"])
        else:
            cprint("%s" % "User does not exist!!", "red")
    else:
        cprint ("%s" % "Status code other than 200 received!!", "red")                   #if status code is not 200



#Function declaration to get the ID of a user by username
def get_user_id(insta_username):                                        #instagram username is given as argument to the function
    request_url = (BASE_URL + "users/search?q=%s&access_token=%s") %(insta_username,APP_ACCESS_TOKEN)    #query parameters are passed
    print "GET request url: %s" %(request_url)                          #to print request url
    user_info = requests.get(request_url)                               #GET request to fetch the data
    user_info = user_info.json()
    if user_info["meta"]["code"] == 200:
        if len(user_info["data"]):
            return user_info["data"][0]["id"]                           #it returns user id
        else:
            return None
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")
        exit()




#Function declaration to get the info of a user by username
def get_user_info(insta_username):                                      #instagram username is given as argument to the function
    user_id = get_user_id(insta_username)                               #it gets the user id by making a call to the get_user_id function
    if user_id == None:
        cprint ("%s" % "User does not exist!!","red")
        exit()
    request_url = (BASE_URL + "users/%s?access_token=%s") % (user_id, APP_ACCESS_TOKEN)
    print "GET request url : %s" % (request_url)                         #to print request url
    user_info = requests.get(request_url).json()                         #GET request to fetch the data
    if user_info["meta"]["code"] == 200:
        if len(user_info["data"]):
            print "\n"
            cprint("%s" % "Another User's Information : ", "red")                      #gives all the information of the instagram user
            print "Username: %s" % (user_info["data"]["username"])
            print "No. of followers: %s" % (user_info["data"]["counts"]["followed_by"])
            print "No. of people you are following: %s" % (user_info["data"]["counts"]["follows"])
            print "No. of posts: %s" % (user_info["data"]["counts"]["media"])
        else:
            cprint("%s" % "There is no data for this user!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")




#Function declaration to get your own recent post
def get_own_post():
    request_url = (BASE_URL + "users/self/media/recent/?access_token=%s") %(APP_ACCESS_TOKEN)
    print "GET request url : %s" %(request_url)                                     #to print request url
    own_media = requests.get(request_url).json()                                    #GET request to fetch the data
    if own_media["meta"]["code"] == 200:
        if len(own_media["data"]):
            image_name = own_media["data"][0]["id"] + ".jpeg"
            image_url = own_media["data"][0]["images"]["standard_resolution"]["url"]
            urllib.urlretrieve(image_url, image_name)                              #urllib is used to fetch data across world wide web.urlretrieve is a function used to download image
            cprint("%s" % "Your image has been downloaded!", "blue")
        else:
            cprint("%s" % "Post does not exist!!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")




#Function declaration to get the recent post of a user by username
def get_user_post(insta_username):
    user_id = get_user_id(insta_username)                                          #instagram username is given as argument to the function
    if user_id == None:
        cprint("%s" % "User does not exist!!", "red")
        exit()
    request_url = (BASE_URL + "users/%s/media/recent/?access_token=%s") % (user_id,APP_ACCESS_TOKEN)
    print "GET request url : %s" % (request_url)                                       #to print request url
    user_media = requests.get(request_url).json()                                      #GET request to fetch the data
    if user_media["meta"]["code"] == 200:
        if len(user_media["data"]):
            image_name = user_media["data"][0]["id"] + ".jpeg"
            image_url = user_media["data"][0]["images"]["standard_resolution"]["url"]
            urllib.urlretrieve(image_url, image_name)                                  #urllib is used to fetch data across world wide web.urlretrieve is a function used to download image
            cprint("%s" % "Image has been downloaded!", "blue")
        else:
            cprint("%s" % "There is no recent post!!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")




#Function declaration to get the ID of the recent post of a user by username
def get_post_id(insta_username):
    user_id = get_user_id(insta_username)                                          #instagram username is given as argument to the function
    if user_id == None:
        cprint("%s" % "User does not exist!!", "red")
        exit()
    request_url = (BASE_URL + "users/%s/media/recent/?access_token=%s") % (user_id, APP_ACCESS_TOKEN)
    print "GET request url : %s" % (request_url)                                    #to print request url
    user_media = requests.get(request_url).json()                                   #GET request to fetch the data
    if user_media["meta"]["code"] == 200:
        if len(user_media["data"]):
            return user_media["data"][0]["id"]                                      # returns media id of the post
        else:
            cprint("%s" % "There is no recent post of the user!", "red")
            exit()
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")
        exit()




#Function declaration to like the recent post of a user
def like_a_post(insta_username):
    media_id = get_post_id(insta_username)
    request_url = (BASE_URL + "media/%s/likes") % (media_id)
    payload = {"access_token" : APP_ACCESS_TOKEN}
    print "POST request url : %s" %(request_url)
    post_a_like = requests.post(request_url, payload).json()                      #POST request to send the data
    if post_a_like["meta"]["code"] == 200:
        cprint("%s" % "Like was successful!", "blue")
    else:
        cprint("%s" % "Your like was unsuccessful. Try again!", "red")




#Function declaration to make a comment on the recent post of the user
def post_a_comment(insta_username):
    media_id = get_post_id(insta_username)
    comment_text = raw_input("Your comment: ")
    if len(comment_text) > 0 and comment_text.isspace() == False:
        text = comment_text.split(" ")
        if len(text) >= 300:                                 #comment length cannot be greater than 300 words
            cprint("%s" % "Sorry! Unable to add comment.Please enter comment of length less than or equal to 300 words.", "red")
        elif len(re.findall(r'#[^#]+\b', comment_text, re.UNICODE | re.MULTILINE)) > 4:          #comment text cannot contain more than 4 hashtags
            cprint("%s" % "The comment cannot contain more than 4 hashtags", "red")
        elif len(re.findall(r'\bhttps?://\S+\.\S+', comment_text)) > 1:                          #comment text cannot contain more than one url
            cprint("%s" % "The comment cannot contain more than 1 URL", "red")
        else:
            payload = {"access_token": APP_ACCESS_TOKEN, "text": comment_text}
            request_url = (BASE_URL + "media/%s/comments") % (media_id)
            print "POST request url : %s" % (request_url)
            make_comment = requests.post(request_url, payload).json()                           #POST request to send the data
            if make_comment["meta"]["code"] == 200:
                cprint("%s" % "Successfully added a new comment!", "blue")
            else:
                cprint("%s" % "Unable to add comment. Try again!", "red")
    else:
        cprint("%s" % "Please add some valid comment.Try again!", "red")




#Function declaration to get list of comments on the recent post of the user
def list_of_comments(insta_username):
    media_id = get_post_id(insta_username)
    request_url = (BASE_URL + "media/%s/comments?access_token=%s") % (media_id ,APP_ACCESS_TOKEN)
    print "GET request url: %s" % (request_url)
    comments = requests.get(request_url).json()
    i = 0
    if comments["meta"]["code"] == 200:
        if len(comments["data"]):
            for ele in comments["data"]:                                       #for loop is used to iterate elements in the list
                print comments["data"][i]["from"]["username"] + ":" + comments["data"][i]["text"]
                i = i + 1
        else:
            cprint ("%s" % "There are no comments on the post!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")
        exit()




#Function declaration to get the recent media liked by the owner of the token
def recent_media_liked():
    request_url = (BASE_URL + "users/self/media/liked?access_token=%s") % (APP_ACCESS_TOKEN)
    print "GET request url : %s" % (request_url)
    user_media = requests.get(request_url).json()
    if user_media["meta"]["code"] == 200:
        if len(user_media["data"]):
            image_name = user_media["data"][0]["id"] + ".jpeg"
            image_url = user_media["data"][0]["images"]["standard_resolution"]["url"]
            urllib.urlretrieve(image_url, image_name)                              #it will download the image
            cprint("%s" % "Image has been downloaded!", "blue")
        else:
            cprint("%s" % "There is no recent post!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")




#Function declaration to fetch the list of users who have liked the recent media
def list_of_likes(insta_username):
    media_id = get_post_id(insta_username)                            #it calls get_post_id function to get media id of the recent post
    request_url = (BASE_URL + "media/%s/likes?access_token=%s") % (media_id,APP_ACCESS_TOKEN)
    print "GET request url : %s" %(request_url)
    likes = requests.get(request_url).json()
    i = 0
    if likes["meta"]["code"] == 200:
        if len(likes["data"]):
            for ele in likes["data"]:
                print likes["data"][i]["username"]
                i = i + 1
        else:
            cprint("%s" % "There is no recent post!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")




#function declaration to get post of your choice in a creative way asking the criteria from the user through the console
def media_of_your_choice(insta_username):
    user_id = get_user_id(insta_username)                                   #it calls get_user_id function to get user id of the user
    if user_id == None:
        cprint("%s" % "User does not exist!!", "red")
        exit()
    request_url = (BASE_URL + "users/%s/media/recent/?access_token=%s") % (user_id, APP_ACCESS_TOKEN)
    print "GET request url : %s" % (request_url)
    user_media = requests.get(request_url).json()
    if user_media["meta"]["code"] == 200:
        if len(user_media["data"]):
            print "No. of posts of user:" + str(len(user_media["data"]))                  # it will print no of posts of paticular user
            post_no = raw_input("Enter the post number which you want to fetch: ")        # it will ask for the post number which we want to fetch.
            if len(post_no) > 0 and post_no.isspace() == False:                   #so that user cannot enter empty post no or spaces
                post_no = int(post_no)                                            #to typecast string to integer
                if post_no > 0 and post_no <= len(user_media["data"]):
                    index = post_no - 1                                           #list has zero based indexing.So data entered must be subtracted from 1 so as to get actual data entered
                    image_name = user_media["data"][index]["id"] + ".jpeg"
                    image_url = user_media["data"][index]["images"]["standard_resolution"]["url"]
                    urllib.urlretrieve(image_url, image_name)
                    cprint("%s" % "Image has been downloaded!","blue")
                else:
                    cprint("%s" % "Please enter a valid post no. Try again!!", "red")
            else:
                cprint("%s" % "Please enter a valid post no. Try again!!", "red")
        else:
            cprint("%s" % "Post does not exist!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")
    return None




#Function declaration to plot user's interests on the basis of hashtag analysis
def hashtag_analysis(insta_username):
    hash_items = {                                               #empty dictionary created named as hash_items

    }
    user_id = get_user_id(insta_username)
    if user_id == None:
        cprint("%s" % "User does not exist!!", "red")
        exit()
    request_url = (BASE_URL + "users/%s/media/recent/?access_token=%s") % (user_id,APP_ACCESS_TOKEN)
    print "GET request url : %s" %(request_url)
    tags = requests.get(request_url).json()
    if tags["meta"]["code"] == 200:
        if len(tags["data"]):
            for media in range(0,len(tags["data"])):                            #for loop will iterate upto the number of posts of the user
                for index in range(0, len(tags["data"][media]["tags"])):        #for loop will iterate upto the no. of tags in the paticular post of the user
                    if tags["data"][media]["tags"][index] in hash_items:
                        hash_items[tags["data"][media]["tags"][index]] += 1      #hashtags if coming twice or more,its value in the dictionary will be updated to 2 or more as per its count value
                    else:
                        hash_items[tags["data"][media]["tags"][index]] = 1
        else:
            cprint("%s" % "There is no recent post!", "red")
    else:
        cprint("%s" % "Status code other than 200 received!!", "red")
    print hash_items                                                         #print dictionary of hashtags along with their count

    show = True
    while show:
        cprint("%s" % "How do you want to plot user's interests?", "blue")
        cprint("%s" % "Choose any option:\n a.Using matplotlib\n b.Using word cloud\n c.Return to main menu options", "red")
        choice = raw_input("Enter you choice: ")
        if choice == "a":
            pylab.figure(1)                                               #pylab is used to plot the graph
            x = range(len(hash_items))                                    #range takes length of dictionary as argument
            pylab.xticks(x, hash_items.keys())
            pylab.plot(x, hash_items.values(), "g")                       #"g" is used to give green color to the graph line
            pylab.show()                                                  #it will display the graph of user's interests
            print "\n"
        elif choice == "b":
            wordcloud = WordCloud().generate_from_frequencies(hash_items)     #worldcloud is a collage of words and those words that are bigger in size have a high frequency.
            plt.imshow(wordcloud, interpolation="bilinear")
            plt.axis("off")                                                   #it will not show the x and y axis
            plt.show()                                                        #it will display the word cloud of user's interests
            print "\n"
        elif choice == "c":
            show = False
        else:
            cprint("%s" % "Wrong choice!", "red")




#Function declaration to start the instabot application and in this, users have many choices to choose from
def start_bot():
    cprint("%s" % "Hey! Welcome to instaBot!", "blue")
    while True:
        print "Here are your menu options:"
        print "a.Get your own details"
        print "b.Get details of a user by username"
        print "c.Get your own recent post"
        print "d.Get the recent post of a user by username"
        print "e.Like the recent post of a user"
        print "f.Make a comment on the recent post of a user"
        print "g.Get the list of comments on the recent post of a user "
        print "h.Get the recent media liked by the owner of the token"
        print "i.Get a list of people who have liked the recent post of a user"
        print "j.Get post of your choice in a creative way"
        print "k.Get the user's interests based on hashtag analysis and plot it using matplotlib or word cloud"
        print "l.Exit"


        choice = raw_input("Enter you choice: ")
        if choice == "a":
            self_info()
            print "\n"
        elif choice == "b":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:          #it checks that username is not empty and does not contain spaces and digits only
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):                    #it does not allow user to enter special char in username
                    get_user_info(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "c":
            get_own_post()
            print "\n"
        elif choice == "d":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    get_user_post(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "e":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    like_a_post(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "f":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    post_a_comment(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "g":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    list_of_comments(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "h":
            recent_media_liked()
            print "\n"
        elif choice == "i":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    list_of_likes(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "j":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    media_of_your_choice(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint ("%s" % "Please enter a valid insta username!", "red")
        elif choice == "k":
            insta_username = raw_input("Enter the username of the user: ")
            if len(insta_username) > 0 and insta_username.isspace() == False and insta_username.isdigit() == False:
                if not set('[~!@#$%^&*()+{}":;\']" "').intersection(insta_username):
                    hashtag_analysis(insta_username)
                    print "\n"
                else:
                    cprint("%s" % "Please enter a valid insta username!\nUsername can only use letters,numbers,underscores and periods!", "red")
            else:
                cprint("%s" % "Please enter a valid insta username!", "red")
        elif choice == "l":
            exit()
        else:
            cprint("%s" % "Wrong choice!", "red")

start_bot()                                                 #calling start_bot function to start our instabot application









